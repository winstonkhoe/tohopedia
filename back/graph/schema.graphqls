# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | UNION
directive @auth on FIELD_DEFINITION

scalar Any
scalar Time
scalar Date

type Coupon {
  id: ID!
  code: String!
  discount: Int!
  minimumPayment: Int!
  maxDiscount: Int!
  shop: Shop! @goField(forceResolver: true)
}

input NewCoupon {
  code: String!
  discount: Int!
  minimumPayment: Int!
  maxDiscount: Int!
}

type Wishlist {
  id: ID!
  product: Product! @goField(forceResolver: true)
  user: User! @goField(forceResolver: true)
}

input NewWishlist {
  productId: String!
}

type Review {
  id: ID!
  transactionDetail: TransactionDetail! @goField(forceResolver: true)
  user: User! @goField(forceResolver: true)
  shop: Shop! @goField(forceResolver: true)
  images: [ReviewImage] @goField(forceResolver: true)
  rating: Int!
  message: String
  anonymous: Boolean!
  createdAt: Time!
}

type ReviewImage {
  id: ID!
  review: Review! @goField(forceResolver: true)
  image: String!
}

input NewReview {
  transactionDetailId: String!
  shopId: String!
  rating: Int!
  message: String
  anonymous: Boolean!
  images: [String]
}

type Topay {
  id: ID!
  user: User! @goField(forceResolver: true)
  balance: Int!
  coin: Int!
}

type TopayToken {
  id: ID!
  code: String!
  user: User! @goField(forceResolver: true)
  value: Int!
  validTo: Time!
  redeemed: Boolean!
}

type EmailToken {
  id: ID!
  user: User! @goField(forceResolver: true)
  email: String!
  validTo: Time!
  redeemed: Boolean!
}

type PasswordToken {
  id: ID!
  email: String!
  validTo: Time!
  redeemed: Boolean!
}

type UserPreferences {
  id: ID!
  user: User! @goField(forceResolver: true)
  category: Category! @goField(forceResolver: true)
  score: Int!
}

union ChatSenderReceiver = User | Shop

type Chat {
  id: ID!
  # senderModel: ChatSenderReceiver @goField(forceResolver: true) @auth
  sender: String!
  # receiverModel: ChatSenderReceiver @goField(forceResolver: true) @auth
  receiver: String!
  content: String!
  createdAt: Time!
}

type ChatHeader {
  id: ID!
  details: [ChatDetails] @goField(forceResolver: true)
  customer: User! @goField(forceResolver: true)
  shop: Shop! @goField(forceResolver: true)
  # receiverIsShop: Boolean!
}

type ChatDetails {
  id: ID!
  chatHeader: ChatHeader! @goField(forceResolver: true)
  content: String!
  sender: String!
  receiver: String!
  createdAt: Time!
}

type Query {
  getShop(slug: String!): Shop!
  getShopById(id: String!): Shop!
  getTopayToken(code: String!): TopayToken! @auth
  getPasswordToken(id: ID!): PasswordToken! 
  getRecommendation: [Product!]! @goField(forceResolver: true) @auth
  getChats(id: String!): [Chat!]! @goField(forceResolver: true) @auth
  # adminData(type: String!): Any! @goField(forceResolver: true) @auth
  transactionsPerDay: Any! @goField(forceResolver: true) @auth
  transactionsPerShipmentType: Any! @goField(forceResolver: true) @auth
  productsPerCategory: Any! @goField(forceResolver: true) @auth
}

type Mutation {
  addChat(senderId: String! receiverId: String! content: String!): Chat! @auth
  createTopayWallet(userId: ID!): Topay!
  createTopayToken(code: String!, value: Int!): TopayToken! @auth
  createEmailToken(email: String!): EmailToken! @auth
  createPasswordToken(email: String!): PasswordToken!
  verifyEmailAddress(id: ID!): Boolean! @auth
  addTopayBalance(code: String!): Topay! @auth
  addReview(input: NewReview!): Review! @auth
  addWishlist(input: NewWishlist!): Wishlist! @auth
  removeWishlist(id: ID!): Wishlist! @auth
}
