# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @auth on FIELD_DEFINITION

scalar Any
scalar Time
scalar Date

type Coupon {
  id: ID!
  code: String!
  discount: Int!
  minimumPayment: Int!
  maxDiscount: Int!
  shop: Shop! @goField(forceResolver: true)
}

input NewCoupon {
  code: String!
  discount: Int!
  minimumPayment: Int!
  maxDiscount: Int!
}

type Wishlist {
  id: ID!
  product: Product! @goField(forceResolver: true)
  user: User! @goField(forceResolver: true)
}

input NewWishlist {
  productId: String!
}

type Ulasan {
  id: ID!
  transactionDetail: TransactionDetail! @goField(forceResolver: true)
  user: User! @goField(forceResolver: true)
  rating: Int!
  message: String
  anonymous: Boolean!
  createdAt: Time!
}

input NewUlasan {
  transactionDetailId: String!
  rating: Int!
  message: String
  anonymous: Boolean!
}

type Topay {
  id: ID!
  user: User! @goField(forceResolver: true)
  balance: Int!
  coin: Int!
}

type TopayToken {
  id: ID!
  code: String!
  user: User! @goField(forceResolver: true)
  value: Int!
  validTo: Time!
  redeemed: Boolean!
}

type Query {
  getShop(slug: String!): Shop!
  getTopayToken(code: String!): TopayToken! @auth
}

type Mutation {
  createTopayWallet(userId: ID!): Topay!
  createTopayToken(code: String!, value: Int!): TopayToken! @auth
  addTopayBalance(code: String!): Topay! @auth
  addUlasan(input: NewUlasan!): Ulasan! @auth
  addWishlist(input: NewWishlist!): Wishlist! @auth
  removeWishlist(id: ID!): Wishlist! @auth
}
