
type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  phone: String!
  gender: Int!
  dob: Date!
  image: String!
  isAdmin: Boolean!
  isSuspended: Boolean!
  requestUnsuspend: Boolean!
  emailVerified: Boolean!
  emailToken: EmailToken @goField(forceResolver: true)
  shop: Shop @goField(forceResolver: true)
  carts: [Cart] @goField(forceResolver: true)
  addresses(query: String): [Address!]! @goField(forceResolver: true)
  transactions: [Transaction!]! @goField(forceResolver: true)
  topay: Topay! @goField(forceResolver: true)
  chats: [ChatHeader] @goField(forceResolver: true)
}

input NewUser {
  name: String!
  email: String!
  password: String!
}

type AuthOps {
  login(email: String!, password: String!): Any! @goField(forceResolver: true)
  register(input: NewUser!): Any! @goField(forceResolver: true)
}

extend type Query {
  user(id: ID!): User! @goField(forceResolver: true)
  users(offset: Int! limit: Int!): [User!]! @goField(forceResolver: true)
  getCurrentUser: User! @goField(forceResolver: true) @auth
  # getChats(id: ID!): [Chat!]! @goField(forceResolver: true) @auth
}

extend type Mutation {
  auth: AuthOps! @goField(forceResolver: true)
  updateUserName(name: String!): User! @auth
  updateUserEmail(email: String!): User! @auth
  updateUserPhone(phone: String!): User! @auth
  updateUserGender(gender: String!): User! @auth
  updateUserDOB(dob: String!): User! @auth
  updateUserImage(image: String!): User! @auth
  suspendUser(id: ID! bool: Boolean!): User! @auth
  requestUnsuspend(id: ID!): User!
}
